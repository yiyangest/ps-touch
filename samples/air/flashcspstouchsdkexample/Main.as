package  {import flash.display.MovieClip;import com.adobe.photoshop.connection.PhotoshopConnection;import flash.events.TimerEvent;import com.adobe.photoshop.events.PhotoshopEvent;import flash.utils.Timer;import flash.events.MouseEvent;import flash.events.Event;import com.structuredlogs.targets.TraceTarget;import com.adobe.photoshop.messages.TextMessage;import com.adobe.photoshop.dispatchers.MessageDispatcher;public class Main extends MovieClip {		public function Main() {		// This is how you turn on the trace statements for the SDK		SLog.isLogging = true;		var tt:TraceTarget = new TraceTarget();		tt.includeCategory = true;		SLog.addTarget(tt);	}		public function init():void	{		login.btnConnect.addEventListener(MouseEvent.MOUSE_DOWN, connect);	}		private var photoshopConnection:PhotoshopConnection;	private function connect(event:Event = null):void	{		login.btnConnect.removeEventListener(MouseEvent.MOUSE_DOWN, connect);		if (!photoshopConnection)		{			var conn:PhotoshopConnection = new PhotoshopConnection();			conn.addEventListener(PhotoshopEvent.ERROR, errorHandler, false, 0, true);					conn.addEventListener(PhotoshopEvent.CONNECTED, connectHandler, false, 0, true);			conn.addEventListener(PhotoshopEvent.DISCONNECTED, errorHandler, false, 0, true);			conn.addEventListener(PhotoshopEvent.ENCRYPTION_SUCCESS, encryptHandler, false, 0, true);						photoshopConnection = conn;			out("Encrypting...");			// Encryption take a bit of time, delay to let UI rendering the text above			// then do the encryption			var timer:Timer = new Timer(100, 1);			timer.addEventListener(TimerEvent.TIMER_COMPLETE, delay);			timer.start();		}		else		{			connectHandler(null);		}	}		private function delay(event:TimerEvent):void	{		photoshopConnection.initEncryption(login.txtPassword.text);	}		private function errorHandler(event:PhotoshopEvent):void	{		out("Error");		if (event.type == PhotoshopEvent.DISCONNECTED)		{			out("Disconnected, Try Reconnecting (check password)");			photoshopConnection = null;		}		else			out("Error: " + event.data);	}		private function encryptHandler(event:PhotoshopEvent):void	{		out("Connecting...["+login.txtIPAddress.text+"]");		photoshopConnection.connect(login.txtIPAddress.text); //	}		private function connectHandler(event:PhotoshopEvent):void	{		out("Connect");		photoshopConnection.removeEventListener(PhotoshopEvent.ERROR, errorHandler);		gotoAndStop(2);		toolbar.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);	}	private function mouseDownHandler(event:MouseEvent):void	{		// Check X location		if (event.localX > 20 && event.localX < 128)		{			if (event.localY > 20 && event.localY < 112 )			{				toolSelected("moveTool");			} 			else if (event.localY > 130 && event.localY < 210 )			{				toolSelected("marqueeRectTool");			}			else if (event.localY > 230 && event.localY < 320 )			{				toolSelected("lassoTool");			}			else if (event.localY > 330 && event.localY < 420 )			{				toolSelected("quickSelectTool");			}			else if (event.localY > 430 && event.localY < 520 )			{				toolSelected("cropTool");			}			else if (event.localY > 530 && event.localY < 620 )			{				toolSelected("eyedropperTool");			}		}	}	private function out(msg:String):void	{		txtOutput.text = msg + "\n" + txtOutput.text;	}		public function toolSelected(tool:String):void	{		out("Selected Tool: " + tool);		var command:String = "var idslct = charIDToTypeID( \"slct\" );\n"+						"var desc19 = new ActionDescriptor();\n"+						"var idnull = charIDToTypeID( \"null\" );\n"+						"var ref17 = new ActionReference();\n"+						"var tool = stringIDToTypeID( \""+tool+"\" );\n"+						"ref17.putClass( tool );\n"+						"desc19.putReference( idnull, ref17 );\n"+						"executeAction( idslct, desc19, DialogModes.NO );";		var msg:TextMessage = MessageDispatcher.generateTextMessage(command);		photoshopConnection.encryptAndSendData(msg.toStream());	}}	}